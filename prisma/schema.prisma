// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Profile {
  id           String     @id @default(uuid())
  clerkId      String     @unique
  firstName    String
  lastName     String
  username     String
  email        String     @unique
  profileImage String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  // one user can create multiple properties
  properties   Property[]
  favorites    Favorite[]
  reviews      Review[]
  bookings     Booking[]

  @@index([email])
  @@map("profiles")
}

model Property {
  id          String   @id @default(uuid())
  name        String
  tagline     String
  category    String
  image       String
  country     String
  description String
  price       Int
  guests      Int
  beds        Int
  bedrooms    Int
  amenities   String
  baths       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  reviews     Review[]

  profile   Profile?   @relation(fields: [profileId], references: [clerkId], onDelete: Cascade)
  profileId String?
  favorites Favorite[]
  bookings  Booking[]

  @@index([name])
  @@map("properties")
}

model Favorite {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile   Profile @relation(fields: [profileId], references: [clerkId], onDelete: Cascade)
  profileId String

  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId String

  @@index([profileId, propertyId])
  @@map("favorites")
}

model Review {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  property   Property? @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId String?
  profile    Profile?  @relation(fields: [profileId], references: [clerkId], onDelete: Cascade)
  profileId  String?
  rating     Int
  comment    String

  @@index([propertyId, profileId])
  @@map("reviews")
}

model Booking {
  id        String   @id @default(uuid())
  profile   Profile? @relation(fields: [profileId], references: [clerkId], onDelete: Cascade)
  profileId String?

  property   Property? @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId String?

  orderTotal    Int
  totalNights   Int
  checkIn       DateTime
  checkOut      DateTime
  paymentStatus Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([propertyId, profileId])
  @@map("bookings")
}
